# Generated by Django 3.1 on 2020-11-16 09:45
from django.db import migrations
from inventory.models import Item
from core.utils.measures import CostingMeasure
from estimation.machine.models import Machine, PressMachine
from estimation.process.models import ActivitySpeed, Activity, ActivityExpense, Workstation


def create_machines(apps, schema_editor):
    def _create(type:str, name:str, description:str, **kwargs):
        machine = Machine.objects.create_machine(type=type,
            name=name, description=description, **kwargs)
        return machine
    
    gto_machine = _create(Machine.SHEET_FED_PRESS, 'Heidelberg GTO', 'GTO High-volume printer', 
        min_sheet_length=15, max_sheet_length=25, min_sheet_width= 15, max_sheet_width=25, uom='inch',
        process_type=PressMachine.OFFSET)

    korse_machine = _create(Machine.SHEET_FED_PRESS, 'Heidelberg KORSE', 'KORSE High-volume printer', 
        min_sheet_length=15, max_sheet_length=25, min_sheet_width= 15, max_sheet_width=25, uom='inch',
        process_type=PressMachine.OFFSET)

    hplatex_machine = _create(Machine.ROLL_FED_PRESS, 'HP Latex', 'HP LATEX digital roll printer',
        min_sheet_width=25, max_sheet_width=48, uom='inch', min_sheet_breakpoint_length=48,
        max_sheet_breakpoint_length=150)


def create_processes(apps, schema_editor):

    gto_machine = Machine.objects.filter(name='Heidelberg GTO').first()
    korse_machine = Machine.objects.filter(name='Heidelberg KORSE').first()
    hplatex_machine = Machine.objects.filter(name='HP Latex').first()

    dataset = [
        {'name': 'GTO Workstation', 'description': 'Workstation for Heidelberge GTO', 'machine': gto_machine,
            'expenses': [
                {'name': 'Electricity', 'type': ActivityExpense.HOUR_BASED, 'rate': 66.67},
                {'name': 'Labor', 'type': ActivityExpense.HOUR_BASED, 'rate': 75},
                {'name': 'Ink', 'type': ActivityExpense.MEASURE_BASED, 'rate': 0.5}
            ],
            'activities': [
                {'name': 'Spot Color Printing', 'set_up': 1, 'tear_down': 1, 'speed': (10000, 'sheet', 'hr'),
                    'expenses': ['Electricity', 'Labor', 'Ink']}
            ],
            'operations': [
                {'name': 'GTO 2-Color Printing', 'material_type': Item.PAPER, 'measure_unit': 'sheet',
                    'steps': [
                        {'activity_name': 'Spot Color Printing', 'notes': '1st color'},
                        {'activity_name': 'Spot Color Printing', 'notes': '2nd color'}
                    ]}
            ]
        },
        {'name': 'KORSE Workstation', 'description': 'Workstation for Heidelberge KORSE', 'machine': korse_machine,
            'expenses': [
                {'name': 'Electricity', 'type': ActivityExpense.HOUR_BASED, 'rate': 66.67},
                {'name': 'Labor', 'type': ActivityExpense.HOUR_BASED, 'rate': 75},
                {'name': 'Ink', 'type': ActivityExpense.MEASURE_BASED, 'rate': 0.5}
            ],
            'activities': [
                {'name': 'Spot Color Printing', 'set_up': 1, 'tear_down': 1, 'speed': (10000, 'sheet', 'hr'),
                    'expenses': ['Electricity', 'Labor', 'Ink']}
            ],
            'operations': [
                {'name': 'KORSE 2-Color Printing', 'material_type': Item.PAPER, 'measure_unit': 'sheet',
                    'steps': [
                        {'activity_name': 'Spot Color Printing', 'notes': '1st color'},
                        {'activity_name': 'Spot Color Printing', 'notes': '2nd color'}
                    ]}
            ]
        },
        {'name': 'HP Latex Workstation', 
            'description': 'Workstation for HP Latex', 'machine': hplatex_machine,
            'expenses': [
                {'name': 'Electricity', 'type': ActivityExpense.HOUR_BASED, 'rate': 66.67},
                {'name': 'Labor', 'type': ActivityExpense.HOUR_BASED, 'rate': 80},
                {'name': 'Ink', 'type': ActivityExpense.MEASURE_BASED, 'rate': 0.75}
            ],
            'activities': [
                {'name': 'Digital Printing', 'set_up': 1, 'tear_down': 1, 
                    'speed': (2.9729, 'sq_m', 'min'),
                    'expenses': ['Electricity', 'Labor', 'Ink']}
            ],
            'operations': [
                {'name': 'HP Latex Digital Printing Operation', 'material_type': Item.PAPER,
                    'costing_measure': CostingMeasure.AREA, 'measure_unit': 'sq_m',
                    'steps': [
                        {'activity_name': 'Digital Printing', 'notes': ''}
                    ]}
            ]
        },
        {'name': 'Finishing Workstation', 'description': 'Workstation for manual tasks', 
            'expenses': [
                {'name': 'Labor', 'type': ActivityExpense.HOUR_BASED, 'rate': 75},
                {'name': 'Padding Fee', 'type': ActivityExpense.FLAT, 'rate': 400}
            ],
            'activities': [
                {'name': 'Gathering', 'set_up': 0.5, 'tear_down': 0.5, 
                    'speed': (30, 'set', 'min'),
                    'expenses': ['Labor']},
                {'name': 'Padding', 'set_up': 0.5, 'tear_down': 0.5, 
                    'speed': (100, 'pad', 'hr'),
                    'expenses': ['Labor', 'Padding Fee']},
            ],
            'operations': [
                {'name': 'Finishing Gathering Operation', 'material_type': Item.PAPER,
                    'steps': [
                        {'activity_name': 'Gathering', 'notes': ''}
                    ]},
                {'name': 'Finishing Padding Operation', 'material_type': Item.PAPER,
                    'steps': [
                        {'activity_name': 'Padding', 'notes': ''}
                    ]},
            ]
        },
        {'name': 'Creatives Workstation', 'description': 'Workstation for design and image-setting', 
            'expenses': [
                {'name': 'Labor', 'type': ActivityExpense.HOUR_BASED, 'rate': 80},
                {'name': 'Operating Costs', 'type': ActivityExpense.HOUR_BASED, 'rate': 110}
            ],
            'activities': [
                {'name': 'Create Layout', 'set_up': 0.5, 'tear_down': 0.5, 
                    'speed': (0.25, 'layout', 'hr'),
                    'expenses': ['Labor', 'Operating Costs']}
            ],
            'operations': [
                {'name': 'Creatives Layout Operation', 'material_type': Item.OTHER,
                    'steps': [
                        {'activity_name': 'Create Layout', 'notes': ''}
                    ]}
            ]
        },
        {'name': 'Polar Cutter Workstation', 
            'description': 'Workstation for Polar Cutting Machine', 
            'expenses': [
                {'name': 'Labor', 'type': ActivityExpense.HOUR_BASED, 'rate': 80},
                {'name': 'Blade Fee', 'type': ActivityExpense.MEASURE_BASED, 'rate': 20}
            ],
            'activities': [
                {'name': 'Cut Sheet', 'set_up': 0.5, 'tear_down': 0.5, 
                    'speed': (5, 'count', 'min'),
                    'expenses': ['Labor', 'Blade Fee']}
            ],
            'operations': [
                {'name': 'Polar Cutting Operation', 'material_type': Item.PAPER,
                    'steps': [
                        {'activity_name': 'Cut Sheet', 'notes': ''}
                    ]}
            ]
        }
    ]
 
    for workstation_data in dataset:
        expenses_data = workstation_data.pop('expenses')
        activities_data = workstation_data.pop('activities')
        operations_data = workstation_data.pop('operations')
        workstation = Workstation.objects.create(**workstation_data)

        for expense_data in expenses_data:
            workstation.add_expense(**expense_data)
        
        for activity_data in activities_data:
            expense_names = activity_data.pop('expenses')
            activity = workstation.add_activity(**activity_data)
            expenses = workstation.activity_expenses.filter(name__in=expense_names)
            expense_ids = [expense.id for expense in expenses]
            activity.activity_expenses.add(*expense_ids)

        for operation_data in operations_data:
            steps_data = operation_data.pop('steps')
            operation = workstation.add_operation(**operation_data)
            for step_data in steps_data:
                activity_name = step_data.pop('activity_name')
                activity = workstation.activities.get(name=activity_name)
                operation.add_step(activity, **step_data)


class Migration(migrations.Migration):

    dependencies = [
        ('estimation', '0001_initial'),
        ('estimation', '1000_generate_test_data_costaddons')
    ]

    operations = [
        migrations.RunPython(create_machines, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(create_processes, reverse_code=migrations.RunPython.noop)
    ]
